{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitRepHelpers\\\\sandbox\\\\src\\\\test-plugin.jsx\";\nimport { Mesh, Color, DoubleSide, MeshPhysicalMaterial } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const createChromaticMaterial = () => {\n  const chromaticMaterial = new MeshPhysicalMaterial({\n    color: new Color(1.0, 0.9, 0.8),\n    emissive: new Color(0.1, 0.1, 0.1),\n    roughness: 0.45,\n    metalness: 0.01,\n    clearcoat: 0.01,\n    reflectivity: 0.0,\n    sheen: 0.5,\n    side: DoubleSide,\n    specularIntensity: 1,\n    name: 'MaterialName.chromaticMaterial'\n  });\n  return chromaticMaterial;\n};\nconst TestPlugin = _ref => {\n  let {\n    useThreeConetxt,\n    appStore\n  } = _ref;\n  const handleOnClick = () => {\n    const {\n      meshes\n    } = appStore.getState();\n    const {\n      camera,\n      scene,\n      gl,\n      invalidate\n    } = useThreeConetxt;\n    if (meshes) {\n      meshes.forEach(mesh => {\n        mesh.material = createChromaticMaterial();\n      });\n    }\n    invalidate();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleOnClick,\n    children: \"Test Plugin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n_c = TestPlugin;\nexport default TestPlugin;\nvar _c;\n$RefreshReg$(_c, \"TestPlugin\");","map":{"version":3,"names":["Mesh","Color","DoubleSide","MeshPhysicalMaterial","jsxDEV","_jsxDEV","createChromaticMaterial","chromaticMaterial","color","emissive","roughness","metalness","clearcoat","reflectivity","sheen","side","specularIntensity","name","TestPlugin","_ref","useThreeConetxt","appStore","handleOnClick","meshes","getState","camera","scene","gl","invalidate","forEach","mesh","material","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/GitRepHelpers/sandbox/src/test-plugin.jsx"],"sourcesContent":["import { Mesh, Color, DoubleSide, MeshPhysicalMaterial } from 'three'\r\n\r\nexport const createChromaticMaterial = () => {\r\n  const chromaticMaterial = new MeshPhysicalMaterial({\r\n    color: new Color(1.0, 0.9, 0.8),\r\n    emissive: new Color(0.1, 0.1, 0.1),\r\n    roughness: 0.45,\r\n    metalness: 0.01,\r\n    clearcoat: 0.01,\r\n    reflectivity: 0.0,\r\n    sheen: 0.5,\r\n    side: DoubleSide,\r\n    specularIntensity: 1,\r\n    name: 'MaterialName.chromaticMaterial'\r\n  })\r\n\r\n  return chromaticMaterial\r\n}\r\n\r\nconst TestPlugin = ({ useThreeConetxt, appStore }) => {\r\n  const handleOnClick = () => {\r\n    const { meshes } = appStore.getState()\r\n    const { camera, scene, gl, invalidate } = useThreeConetxt\r\n    if (meshes) {\r\n      meshes.forEach((mesh) => {\r\n        mesh.material = createChromaticMaterial()\r\n      })\r\n    }\r\n    invalidate()\r\n  }\r\n  return <div onClick={handleOnClick}>Test Plugin</div>\r\n}\r\n\r\nexport default TestPlugin\r\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,oBAAoB,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErE,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAC3C,MAAMC,iBAAiB,GAAG,IAAIJ,oBAAoB,CAAC;IACjDK,KAAK,EAAE,IAAIP,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC/BQ,QAAQ,EAAE,IAAIR,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAClCS,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,GAAG;IACjBC,KAAK,EAAE,GAAG;IACVC,IAAI,EAAEb,UAAU;IAChBc,iBAAiB,EAAE,CAAC;IACpBC,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,OAAOV,iBAAiB;AAC1B,CAAC;AAED,MAAMW,UAAU,GAAGC,IAAA,IAAmC;EAAA,IAAlC;IAAEC,eAAe;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC/C,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAM;MAAEC;IAAO,CAAC,GAAGF,QAAQ,CAACG,QAAQ,CAAC,CAAC;IACtC,MAAM;MAAEC,MAAM;MAAEC,KAAK;MAAEC,EAAE;MAAEC;IAAW,CAAC,GAAGR,eAAe;IACzD,IAAIG,MAAM,EAAE;MACVA,MAAM,CAACM,OAAO,CAAEC,IAAI,IAAK;QACvBA,IAAI,CAACC,QAAQ,GAAGzB,uBAAuB,CAAC,CAAC;MAC3C,CAAC,CAAC;IACJ;IACAsB,UAAU,CAAC,CAAC;EACd,CAAC;EACD,oBAAOvB,OAAA;IAAK2B,OAAO,EAAEV,aAAc;IAAAW,QAAA,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACvD,CAAC;AAAAC,EAAA,GAZKpB,UAAU;AAchB,eAAeA,UAAU;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}