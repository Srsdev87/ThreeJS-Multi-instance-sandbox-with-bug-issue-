{"ast":null,"code":"import { createStyles } from '@mantine/styles';\nvar useStyles = createStyles((theme, _ref) => {\n  let {\n    smallerThan,\n    largerThan,\n    query,\n    styles\n  } = _ref;\n  const media = {};\n  const minWidth = theme.fn.size({\n    size: largerThan,\n    sizes: theme.breakpoints\n  });\n  const maxWidth = theme.fn.size({\n    size: smallerThan,\n    sizes: theme.breakpoints\n  });\n  const _styles = typeof styles === \"function\" ? styles(theme) : styles;\n  if (largerThan !== void 0 && smallerThan !== void 0) {\n    media[\"@media (min-width: \".concat(minWidth, \"px) and (max-width: \").concat(maxWidth - 1, \"px)\")] = _styles;\n  } else {\n    if (largerThan !== void 0) {\n      media[\"@media (min-width: \".concat(theme.fn.size({\n        size: largerThan,\n        sizes: theme.breakpoints\n      }), \"px)\")] = _styles;\n    }\n    if (smallerThan !== void 0) {\n      media[\"@media (max-width: \".concat(theme.fn.size({\n        size: smallerThan,\n        sizes: theme.breakpoints\n      }) - 1, \"px)\")] = _styles;\n    }\n  }\n  if (query) {\n    media[\"@media \".concat(query)] = _styles;\n  }\n  return {\n    media\n  };\n});\nexport default useStyles;","map":{"version":3,"names":["useStyles","createStyles","theme","_ref","smallerThan","largerThan","query","styles","media","minWidth","fn","size","sizes","breakpoints","maxWidth","_styles","concat"],"sources":["C:\\GitRepHelpers\\sandbox\\node_modules\\@mantine\\core\\src\\MediaQuery\\MediaQuery.styles.ts"],"sourcesContent":["import { createStyles, MantineNumberSize, CSSObject, MantineTheme } from '@mantine/styles';\n\nexport interface MediaQueryStylesParams {\n  smallerThan: MantineNumberSize;\n  largerThan: MantineNumberSize;\n  styles: CSSObject | ((theme: MantineTheme) => CSSObject);\n  query: string;\n}\n\nexport default createStyles(\n  (theme, { smallerThan, largerThan, query, styles }: MediaQueryStylesParams) => {\n    const media: CSSObject = {};\n    const minWidth = theme.fn.size({ size: largerThan, sizes: theme.breakpoints });\n    const maxWidth = theme.fn.size({ size: smallerThan, sizes: theme.breakpoints });\n    const _styles = typeof styles === 'function' ? styles(theme) : styles;\n\n    if (largerThan !== undefined && smallerThan !== undefined) {\n      media[`@media (min-width: ${minWidth}px) and (max-width: ${maxWidth - 1}px)`] = _styles;\n    } else {\n      if (largerThan !== undefined) {\n        media[\n          `@media (min-width: ${theme.fn.size({ size: largerThan, sizes: theme.breakpoints })}px)`\n        ] = _styles;\n      }\n\n      if (smallerThan !== undefined) {\n        media[\n          `@media (max-width: ${\n            theme.fn.size({ size: smallerThan, sizes: theme.breakpoints }) - 1\n          }px)`\n        ] = _styles;\n      }\n    }\n\n    if (query) {\n      media[`@media ${query}`] = _styles;\n    }\n\n    return { media };\n  }\n);\n"],"mappings":";AACA,IAAAA,SAAA,GAAeC,YAAY,CAAC,CAACC,KAAK,EAAAC,IAAA,KAAiD;EAAA,IAA/C;IAAEC,WAAW;IAAEC,UAAU;IAAEC,KAAK;IAAEC;EAAM,CAAE,GAAAJ,IAAA;EAC5E,MAAMK,KAAK,GAAG,EAAE;EAChB,MAAMC,QAAQ,GAAGP,KAAK,CAACQ,EAAE,CAACC,IAAI,CAAC;IAAEA,IAAI,EAAEN,UAAU;IAAEO,KAAK,EAAEV,KAAK,CAACW;EAAW,CAAE,CAAC;EAC9E,MAAMC,QAAQ,GAAGZ,KAAK,CAACQ,EAAE,CAACC,IAAI,CAAC;IAAEA,IAAI,EAAEP,WAAW;IAAEQ,KAAK,EAAEV,KAAK,CAACW;EAAW,CAAE,CAAC;EAC/E,MAAME,OAAO,GAAG,OAAOR,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACL,KAAK,CAAC,GAAGK,MAAM;EACrE,IAAIF,UAAU,KAAK,KAAK,CAAC,IAAID,WAAW,KAAK,KAAK,CAAC,EAAE;IACnDI,KAAK,uBAAAQ,MAAA,CAAuBP,QAAQ,0BAAAO,MAAA,CAAuBF,QAAQ,GAAG,CAAC,SAAM,GAAGC,OAAO;EAC3F,CAAG,MAAM;IACL,IAAIV,UAAU,KAAK,KAAK,CAAC,EAAE;MACzBG,KAAK,uBAAAQ,MAAA,CAAuBd,KAAK,CAACQ,EAAE,CAACC,IAAI,CAAC;QAAEA,IAAI,EAAEN,UAAU;QAAEO,KAAK,EAAEV,KAAK,CAACW;MAAW,CAAE,CAAC,SAAM,GAAGE,OAAO;IAC/G;IACI,IAAIX,WAAW,KAAK,KAAK,CAAC,EAAE;MAC1BI,KAAK,uBAAAQ,MAAA,CAAuBd,KAAK,CAACQ,EAAE,CAACC,IAAI,CAAC;QAAEA,IAAI,EAAEP,WAAW;QAAEQ,KAAK,EAAEV,KAAK,CAACW;MAAW,CAAE,CAAC,GAAG,CAAC,SAAM,GAAGE,OAAO;IACpH;EACA;EACE,IAAIT,KAAK,EAAE;IACTE,KAAK,WAAAQ,MAAA,CAAWV,KAAK,EAAG,GAAGS,OAAO;EACtC;EACE,OAAO;IAAEP;EAAK,CAAE;AAClB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}